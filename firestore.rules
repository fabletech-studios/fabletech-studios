rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin (you'll need to set this custom claim)
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Series - Public read, admin write
    match /series/{seriesId} {
      allow read: if true;  // Anyone can browse series
      allow create: if isAdmin(); // Only admins can create
      allow update: if isAdmin(); // Only admins can update
      allow delete: if isAdmin(); // Only admins can delete
    }
    
    // Episodes - Public read, admin write
    match /episodes/{episodeId} {
      allow read: if true;  // Anyone can browse episodes
      allow create, update, delete: if isAdmin(); // Only admins can modify
    }
    
    // Customer profiles - Private to each user
    match /customers/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      // Simplified update rule - allow owner to update their own document
      // The backend will handle credit validation
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion through client
    }
    
    // User ratings - Private to each user
    match /users/{userId}/ratings/{ratingId} {
      allow read, write: if isOwner(userId);
    }
    
    // Episode statistics - Public read, authenticated write
    match /episodeStats/{statId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    match /episode_stats/{statId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Analytics plays - Write only for authenticated, admin read
    match /analytics_plays/{playId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Never allow modification
    }
    
    // Playback progress - Private to each user
    match /playback_progress/{progressId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }
    
    // Credit transactions - Users can read their own and create when spending credits
    match /credit-transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.type == 'spend' &&
        request.resource.data.amount <= 0; // Only allow negative amounts (spending)
      allow update, delete: if false; // Never allow modification
    }
    
    // Violations - Admin only
    match /violations/{violationId} {
      allow read, write: if isAdmin();
    }
    
    // Test connection - Allow authenticated users to test
    match /test-connection/{docId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // Watch history - Private to each user
    match /watchHistory/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // Purchases - Users can read their own
    match /purchases/{purchaseId} {
      allow read: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || isAdmin());
      allow write: if false; // Only through server
    }
    
    // User activities - Users can read their own activities
    match /activities/{activityId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if false; // Only through server
    }
    
    // User activities subcollection
    match /users/{userId}/activities/{activityId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only through server
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}