rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit for images
    }
    
    function isValidVideoFile() {
      return request.resource.contentType.matches('video/.*') &&
        request.resource.size < 2000 * 1024 * 1024; // 2GB limit for videos
    }
    
    function isValidAudioFile() {
      return request.resource.contentType.matches('audio/.*') &&
        request.resource.size < 500 * 1024 * 1024; // 500MB limit for audio
    }
    
    // Series banners and thumbnails
    match /series/{seriesId}/banner/{fileName} {
      allow read: if true; // Public access
      allow write: if isAdmin() && isValidImageFile();
    }
    
    match /series/{seriesId}/episodes/{episodeId}/thumbnail/{fileName} {
      allow read: if true; // Public access for thumbnails
      allow write: if isAdmin() && isValidImageFile();
    }
    
    // Episode media files (video/audio)
    match /series/{seriesId}/episodes/{episodeId}/media/{fileName} {
      // Read access requires authentication (customers must be logged in)
      allow read: if isAuthenticated();
      allow write: if isAdmin() && (isValidVideoFile() || isValidAudioFile());
    }
    
    // Uploaded content (for local uploads)
    match /uploads/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User profile images (future feature)
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile images
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        isValidImageFile();
    }
    
    // Temporary upload directory (for processing)
    match /temp/{sessionId}/{fileName} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
