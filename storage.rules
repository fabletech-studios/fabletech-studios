rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Helper function to validate file size (in bytes)
    function isValidFileSize(maxSize) {
      return request.resource.size <= maxSize;
    }
    
    // Helper function to validate content type
    function isValidContentType(types) {
      return request.resource.contentType.matches(types);
    }
    
    // Videos - Public read, authenticated write with size limit
    match /videos/{allPaths=**} {
      allow read: if true;  // Public access for viewing
      allow write: if isAuthenticated() && 
        isValidFileSize(5000 * 1024 * 1024) && // 5GB max
        isValidContentType('video/.*');
    }
    
    // Audio - Public read, authenticated write with size limit
    match /audio/{allPaths=**} {
      allow read: if true;  // Public access for listening
      allow write: if isAuthenticated() && 
        isValidFileSize(500 * 1024 * 1024) && // 500MB max
        isValidContentType('audio/.*');
    }
    
    // Thumbnails - Public read, authenticated write with size limit
    match /thumbnails/{allPaths=**} {
      allow read: if true;  // Public access for viewing
      allow write: if isAuthenticated() && 
        isValidFileSize(10 * 1024 * 1024) && // 10MB max
        isValidContentType('image/.*');
    }
    
    // Banners - Public read, authenticated write with size limit
    match /banners/{allPaths=**} {
      allow read: if true;  // Public access for viewing
      allow write: if isAuthenticated() && 
        isValidFileSize(100 * 1024 * 1024) && // 100MB max for videos
        isValidContentType('(image|video)/.*');
    }
    
    // Series content - Public read, authenticated write
    match /series/{seriesId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Episodes content - Public read, authenticated write
    match /episodes/{episodeId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // User-specific content - Private to each user
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidFileSize(100 * 1024 * 1024); // 100MB limit for user uploads
    }
    
    // Media folder - Public read, authenticated write
    match /media/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Uploads folder - Public read, authenticated write
    match /uploads/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Default deny for any unmatched paths
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}